//
//  FSPointToSegmentPenTests.m
//  FontScriptTests
//
//  Created by David Schweinsberg on 7/10/18.
//  Copyright Â© 2018 David Schweinsberg. All rights reserved.
//

#import <XCTest/XCTest.h>
#import "FSPointToSegmentPen.h"
#import "FSPoint.h"
#import "FSTestPen.h"

@interface FSSegmentTestPen : FSPointToSegmentPen
{
  void (^_block)(NSArray<FSSegment *> *segments);
}

- (instancetype)initWithFlushBlock:(void (^)(NSArray<FSSegment *> *segments))block;
- (void)flushSegments:(nonnull NSArray<FSSegment *> *)segments;

@end

@implementation FSSegmentTestPen

- (instancetype)initWithFlushBlock:(void (^)(NSArray<FSSegment *> *segments))block {
  self = [super initWithPen:[[FSTestPen alloc] init]];
  if (self) {
    _block = block;
  }
  return self;
}

- (void)flushSegments:(nonnull NSArray<FSSegment *> *)segments {
  _block(segments);
}

@end

@interface FSPointToSegmentPenTests : XCTestCase

@end

@implementation FSPointToSegmentPenTests

- (void)setUp {
    [super setUp];
    // Put setup code here. This method is called before the invocation of each test method in the class.
}

- (void)tearDown {
    // Put teardown code here. This method is called after the invocation of each test method in the class.
    [super tearDown];
}

- (void)testSegmentEmpty {
  __block NSArray<FSSegment *> *flushedSegments;
  FSSegmentTestPen *pen = [[FSSegmentTestPen alloc] initWithFlushBlock:^(NSArray<FSSegment *> *segments) {
    flushedSegments = segments;
  }];

  [pen beginPath];
  [pen endPath];

  XCTAssertEqual(flushedSegments.count, 0);
}

- (void)testSegmentSimpleMove {
  __block NSArray<FSSegment *> *flushedSegments;
  FSSegmentTestPen *pen = [[FSSegmentTestPen alloc] initWithFlushBlock:^(NSArray<FSSegment *> *segments) {
    flushedSegments = segments;
  }];

  [pen beginPath];
  [pen addCGPoint:CGPointMake(100, 100) type:FSPointTypeMove smooth:NO];
  [pen endPath];

  XCTAssertEqual(flushedSegments.count, 1);
  XCTAssertEqual(flushedSegments[0].type, FSSegmentTypeMove);
  XCTAssertEqual(flushedSegments[0].points.count, 1);
  XCTAssertEqual(flushedSegments[0].points[0].x, 100);
  XCTAssertEqual(flushedSegments[0].points[0].y, 100);
}

- (void)testSegmentBox {
  __block NSArray<FSSegment *> *flushedSegments;
  FSSegmentTestPen *pen = [[FSSegmentTestPen alloc] initWithFlushBlock:^(NSArray<FSSegment *> *segments) {
    flushedSegments = segments;
  }];

  [pen beginPath];
  [pen addCGPoint:CGPointMake(100, 100) type:FSPointTypeLine smooth:NO];
  [pen addCGPoint:CGPointMake(100, -100) type:FSPointTypeLine smooth:NO];
  [pen addCGPoint:CGPointMake(-100, -100) type:FSPointTypeLine smooth:NO];
  [pen addCGPoint:CGPointMake(-100, 100) type:FSPointTypeLine smooth:NO];
  [pen endPath];

  XCTAssertEqual(flushedSegments.count, 4);
  for (FSSegment *segment in flushedSegments) {
    XCTAssertEqual(segment.type, FSSegmentTypeLine);
    XCTAssertEqual(segment.points.count, 1);
  }
  // Points array will be rotated so that the first is now the last
  XCTAssertEqual(flushedSegments[3].points[0].x, 100);
  XCTAssertEqual(flushedSegments[3].points[0].y, 100);
  XCTAssertEqual(flushedSegments[0].points[0].x, 100);
  XCTAssertEqual(flushedSegments[0].points[0].y, -100);
  XCTAssertEqual(flushedSegments[1].points[0].x, -100);
  XCTAssertEqual(flushedSegments[1].points[0].y, -100);
  XCTAssertEqual(flushedSegments[2].points[0].x, -100);
  XCTAssertEqual(flushedSegments[2].points[0].y, 100);
}

- (void)testSegmentOpenAngledLine {
  __block NSArray<FSSegment *> *flushedSegments;
  FSSegmentTestPen *pen = [[FSSegmentTestPen alloc] initWithFlushBlock:^(NSArray<FSSegment *> *segments) {
    flushedSegments = segments;
  }];

  [pen beginPath];
  [pen addCGPoint:CGPointMake(0, 100) type:FSPointTypeMove smooth:NO];
  [pen addCGPoint:CGPointMake(0, 0) type:FSPointTypeLine smooth:NO];
  [pen addCGPoint:CGPointMake(100, 0) type:FSPointTypeLine smooth:NO];
  [pen endPath];

  XCTAssertEqual(flushedSegments.count, 3);
  XCTAssertEqual(flushedSegments[0].type, FSSegmentTypeMove);
  XCTAssertEqual(flushedSegments[1].type, FSSegmentTypeLine);
  XCTAssertEqual(flushedSegments[2].type, FSSegmentTypeLine);

  XCTAssertEqual(flushedSegments[0].points.count, 1);
  XCTAssertEqual(flushedSegments[0].points[0].x, 0);
  XCTAssertEqual(flushedSegments[0].points[0].y, 100);

  XCTAssertEqual(flushedSegments[1].points.count, 1);
  XCTAssertEqual(flushedSegments[1].points[0].x, 0);
  XCTAssertEqual(flushedSegments[1].points[0].y, 0);

  XCTAssertEqual(flushedSegments[2].points.count, 1);
  XCTAssertEqual(flushedSegments[2].points[0].x, 100);
  XCTAssertEqual(flushedSegments[2].points[0].y, 0);
}

- (void)testSegmentDee {
  __block NSArray<FSSegment *> *flushedSegments;
  FSSegmentTestPen *pen = [[FSSegmentTestPen alloc] initWithFlushBlock:^(NSArray<FSSegment *> *segments) {
    flushedSegments = segments;
  }];

  [pen beginPath];
  [pen addCGPoint:CGPointMake(-100, 100) type:FSPointTypeLine smooth:NO];
  [pen addCGPoint:CGPointMake(0, 100) type:FSPointTypeLine smooth:NO];
  [pen addCGPoint:CGPointMake(50, 100) type:FSPointTypeOffCurve smooth:NO];
  [pen addCGPoint:CGPointMake(100, 50) type:FSPointTypeOffCurve smooth:NO];
  [pen addCGPoint:CGPointMake(100, 0) type:FSPointTypeCurve smooth:NO];
  [pen addCGPoint:CGPointMake(100, -50) type:FSPointTypeOffCurve smooth:NO];
  [pen addCGPoint:CGPointMake(50, -100) type:FSPointTypeOffCurve smooth:NO];
  [pen addCGPoint:CGPointMake(0, -100) type:FSPointTypeCurve smooth:NO];
  [pen addCGPoint:CGPointMake(-100, -100) type:FSPointTypeLine smooth:NO];
  [pen endPath];

  XCTAssertEqual(flushedSegments.count, 5);
  XCTAssertEqual(flushedSegments[0].type, FSSegmentTypeLine);
  XCTAssertEqual(flushedSegments[1].type, FSSegmentTypeCurve);
  XCTAssertEqual(flushedSegments[2].type, FSSegmentTypeCurve);
  XCTAssertEqual(flushedSegments[3].type, FSSegmentTypeLine);
  XCTAssertEqual(flushedSegments[4].type, FSSegmentTypeLine);
}

- (void)testSegmentQDee {
  __block NSArray<FSSegment *> *flushedSegments;
  FSSegmentTestPen *pen = [[FSSegmentTestPen alloc] initWithFlushBlock:^(NSArray<FSSegment *> *segments) {
    flushedSegments = segments;
  }];

  [pen beginPath];
  [pen addCGPoint:CGPointMake(-100, 100) type:FSPointTypeLine smooth:NO];
  [pen addCGPoint:CGPointMake(0, 100) type:FSPointTypeLine smooth:NO];
  [pen addCGPoint:CGPointMake(100, 100) type:FSPointTypeOffCurve smooth:NO];
  [pen addCGPoint:CGPointMake(100, 0) type:FSPointTypeQCurve smooth:NO];
  [pen addCGPoint:CGPointMake(100, -100) type:FSPointTypeOffCurve smooth:NO];
  [pen addCGPoint:CGPointMake(0, -100) type:FSPointTypeQCurve smooth:NO];
  [pen addCGPoint:CGPointMake(-100, -100) type:FSPointTypeLine smooth:NO];
  [pen endPath];

  XCTAssertEqual(flushedSegments.count, 5);
  XCTAssertEqual(flushedSegments[0].type, FSSegmentTypeLine);
  XCTAssertEqual(flushedSegments[1].type, FSSegmentTypeQCurve);
  XCTAssertEqual(flushedSegments[2].type, FSSegmentTypeQCurve);
  XCTAssertEqual(flushedSegments[3].type, FSSegmentTypeLine);
  XCTAssertEqual(flushedSegments[4].type, FSSegmentTypeLine);
}

- (void)testSegmentQOh {
  __block NSArray<FSSegment *> *flushedSegments;
  FSSegmentTestPen *pen = [[FSSegmentTestPen alloc] initWithFlushBlock:^(NSArray<FSSegment *> *segments) {
    flushedSegments = segments;
  }];

  [pen beginPath];
  [pen addCGPoint:CGPointMake(-100, 100) type:FSPointTypeOffCurve smooth:NO];
  [pen addCGPoint:CGPointMake(100, 100) type:FSPointTypeOffCurve smooth:NO];
  [pen addCGPoint:CGPointMake(100, -100) type:FSPointTypeOffCurve smooth:NO];
  [pen addCGPoint:CGPointMake(-100, -100) type:FSPointTypeOffCurve smooth:NO];
  [pen endPath];

  XCTAssertEqual(flushedSegments.count, 1);
  XCTAssertEqual(flushedSegments[0].type, FSSegmentTypeQCurve);
}

- (void)testEmpty {
  FSTestPen *testPen = [[FSTestPen alloc] init];
  FSPointToSegmentPen *pen = [[FSPointToSegmentPen alloc] initWithPen:testPen];
  [pen beginPath];
  [pen endPath];

  XCTAssertEqual(testPen.records.count, 0);
}

- (void)testSimpleMove {
  FSTestPen *testPen = [[FSTestPen alloc] init];
  FSPointToSegmentPen *pen = [[FSPointToSegmentPen alloc] initWithPen:testPen];

  [pen beginPath];
  [pen addCGPoint:CGPointMake(100, 100) type:FSPointTypeMove smooth:NO];
  [pen endPath];

  XCTAssertEqual(testPen.records.count, 2);
  XCTAssertEqualObjects(testPen.records[0], @"moveTo (100, 100)");
  XCTAssertEqualObjects(testPen.records[1], @"endPath");
}

- (void)testBox {
  FSTestPen *testPen = [[FSTestPen alloc] init];
  FSPointToSegmentPen *pen = [[FSPointToSegmentPen alloc] initWithPen:testPen];

  [pen beginPath];
  [pen addCGPoint:CGPointMake(100, 100) type:FSPointTypeLine smooth:NO];
  [pen addCGPoint:CGPointMake(100, -100) type:FSPointTypeLine smooth:NO];
  [pen addCGPoint:CGPointMake(-100, -100) type:FSPointTypeLine smooth:NO];
  [pen addCGPoint:CGPointMake(-100, 100) type:FSPointTypeLine smooth:NO];
  [pen endPath];

  XCTAssertEqual(testPen.records.count, 5);
  XCTAssertEqualObjects(testPen.records[0], @"moveTo (100, 100)");
  XCTAssertEqualObjects(testPen.records[1], @"lineTo (100, -100)");
  XCTAssertEqualObjects(testPen.records[2], @"lineTo (-100, -100)");
  XCTAssertEqualObjects(testPen.records[3], @"lineTo (-100, 100)");
  XCTAssertEqualObjects(testPen.records[4], @"closePath");
}

- (void)testOpenAngledLine {
  FSTestPen *testPen = [[FSTestPen alloc] init];
  FSPointToSegmentPen *pen = [[FSPointToSegmentPen alloc] initWithPen:testPen];

  [pen beginPath];
  [pen addCGPoint:CGPointMake(0, 100) type:FSPointTypeMove smooth:NO];
  [pen addCGPoint:CGPointMake(0, 0) type:FSPointTypeLine smooth:NO];
  [pen addCGPoint:CGPointMake(100, 0) type:FSPointTypeLine smooth:NO];
  [pen endPath];

  XCTAssertEqual(testPen.records.count, 4);
  XCTAssertEqualObjects(testPen.records[0], @"moveTo (0, 100)");
  XCTAssertEqualObjects(testPen.records[1], @"lineTo (0, 0)");
  XCTAssertEqualObjects(testPen.records[2], @"lineTo (100, 0)");
  XCTAssertEqualObjects(testPen.records[3], @"endPath");
}

- (void)testDee {
  FSTestPen *testPen = [[FSTestPen alloc] init];
  FSPointToSegmentPen *pen = [[FSPointToSegmentPen alloc] initWithPen:testPen];

  [pen beginPath];
  [pen addCGPoint:CGPointMake(-100, 100) type:FSPointTypeLine smooth:NO];
  [pen addCGPoint:CGPointMake(0, 100) type:FSPointTypeLine smooth:NO];
  [pen addCGPoint:CGPointMake(50, 100) type:FSPointTypeOffCurve smooth:NO];
  [pen addCGPoint:CGPointMake(100, 50) type:FSPointTypeOffCurve smooth:NO];
  [pen addCGPoint:CGPointMake(100, 0) type:FSPointTypeCurve smooth:NO];
  [pen addCGPoint:CGPointMake(100, -50) type:FSPointTypeOffCurve smooth:NO];
  [pen addCGPoint:CGPointMake(50, -100) type:FSPointTypeOffCurve smooth:NO];
  [pen addCGPoint:CGPointMake(0, -100) type:FSPointTypeCurve smooth:NO];
  [pen addCGPoint:CGPointMake(-100, -100) type:FSPointTypeLine smooth:NO];
  [pen endPath];

  XCTAssertEqual(testPen.records.count, 6);
  XCTAssertEqualObjects(testPen.records[0], @"moveTo (-100, 100)");
  XCTAssertEqualObjects(testPen.records[1], @"lineTo (0, 100)");
  XCTAssertEqualObjects(testPen.records[2], @"curveTo (50, 100) (100, 50) (100, 0)");
  XCTAssertEqualObjects(testPen.records[3], @"curveTo (100, -50) (50, -100) (0, -100)");
  XCTAssertEqualObjects(testPen.records[4], @"lineTo (-100, -100)");
  XCTAssertEqualObjects(testPen.records[5], @"closePath");
}

- (void)testQDee {
  FSTestPen *testPen = [[FSTestPen alloc] init];
  FSPointToSegmentPen *pen = [[FSPointToSegmentPen alloc] initWithPen:testPen];

  [pen beginPath];
  [pen addCGPoint:CGPointMake(-100, 100) type:FSPointTypeLine smooth:NO];
  [pen addCGPoint:CGPointMake(0, 100) type:FSPointTypeLine smooth:NO];
  [pen addCGPoint:CGPointMake(100, 100) type:FSPointTypeOffCurve smooth:NO];
  [pen addCGPoint:CGPointMake(100, 0) type:FSPointTypeQCurve smooth:NO];
  [pen addCGPoint:CGPointMake(100, -100) type:FSPointTypeOffCurve smooth:NO];
  [pen addCGPoint:CGPointMake(0, -100) type:FSPointTypeQCurve smooth:NO];
  [pen addCGPoint:CGPointMake(-100, -100) type:FSPointTypeLine smooth:NO];
  [pen endPath];

  XCTAssertEqual(testPen.records.count, 6);
  XCTAssertEqualObjects(testPen.records[0], @"moveTo (-100, 100)");
  XCTAssertEqualObjects(testPen.records[1], @"lineTo (0, 100)");
  XCTAssertEqualObjects(testPen.records[2], @"qCurveTo (100, 100) (100, 0)");
  XCTAssertEqualObjects(testPen.records[3], @"qCurveTo (100, -100) (0, -100)");
  XCTAssertEqualObjects(testPen.records[4], @"lineTo (-100, -100)");
  XCTAssertEqualObjects(testPen.records[5], @"closePath");
}

- (void)testQOh {
  FSTestPen *testPen = [[FSTestPen alloc] init];
  FSPointToSegmentPen *pen = [[FSPointToSegmentPen alloc] initWithPen:testPen];

  [pen beginPath];
  [pen addCGPoint:CGPointMake(-100, 100) type:FSPointTypeOffCurve smooth:NO];
  [pen addCGPoint:CGPointMake(100, 100) type:FSPointTypeOffCurve smooth:NO];
  [pen addCGPoint:CGPointMake(100, -100) type:FSPointTypeOffCurve smooth:NO];
  [pen addCGPoint:CGPointMake(-100, -100) type:FSPointTypeOffCurve smooth:NO];
  [pen endPath];

  XCTAssertEqual(testPen.records.count, 2);
  XCTAssertEqualObjects(testPen.records[0], @"qCurveTo (-100, 100) (100, 100) (100, -100) (-100, -100)");
  XCTAssertEqualObjects(testPen.records[1], @"closePath");
}

@end
